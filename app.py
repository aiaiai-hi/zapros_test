import streamlit as st
import pandas as pd
from io import BytesIO
from workalendar.europe import Russia
from datetime import datetime

def display_results(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º"""
    st.markdown("---")
    st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

    # –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞
    st.subheader("üîé –ü–æ–∏—Å–∫")
    search_query = st.text_input(
        "–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –æ—Ç—á–µ—Ç–∞ (report_code) –∏–ª–∏ business_id:",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ business_id..."
    )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
    filtered_df = df.copy()
    if search_query:
        search_mask = (
            filtered_df['report_code'].astype(str).str.contains(search_query, case=False, na=False) |
            filtered_df['business_id'].astype(str).str.contains(search_query, case=False, na=False)
        )
        filtered_df = filtered_df[search_mask]

    # –§–∏–ª—å—Ç—Ä—ã
    st.subheader("üîß –§–∏–ª—å—Ç—Ä—ã")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        form_types = ['–í—Å–µ'] + sorted(df['form_type_report'].dropna().unique().tolist())
        selected_form_type = st.selectbox("–¢–∏–ø —Ñ–æ—Ä–º—ã –æ—Ç—á–µ—Ç–∞:", form_types)

        analysts = ['–í—Å–µ'] + sorted(df['analyst'].dropna().unique().tolist())
        selected_analyst = st.selectbox("–ê–Ω–∞–ª–∏—Ç–∏–∫:", analysts)

    with col2:
        stages = ['–í—Å–µ'] + sorted(df['current_stage'].dropna().unique().tolist())
        selected_stage = st.selectbox("–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è:", stages)

        owners = ['–í—Å–µ'] + sorted(df['request_owner'].dropna().unique().tolist())
        selected_owner = st.selectbox("–í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–æ—Å–∞:", owners)

    with col3:
        owner_ssps = ['–í—Å–µ'] + sorted(df['request_owner_ssp'].dropna().unique().tolist())
        selected_owner_ssp = st.selectbox("–í–ª–∞–¥–µ–ª–µ—Ü –°–°–ü:", owner_ssps)

        min_days = st.number_input("–ú–∏–Ω. –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ:", min_value=0, value=0)

    with col4:
        max_days = st.number_input("–ú–∞–∫—Å. –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ:", min_value=0, value=1000)

        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"):
            st.rerun()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if selected_form_type != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['form_type_report'] == selected_form_type]

    if selected_stage != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['current_stage'] == selected_stage]

    if selected_analyst != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['analyst'] == selected_analyst]

    if selected_owner != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['request_owner'] == selected_owner]

    if selected_owner_ssp != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['request_owner_ssp'] == selected_owner_ssp]

    filtered_df = filtered_df[
        (filtered_df['–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ'] >= min_days) & 
        (filtered_df['–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ'] <= max_days)
    ]

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(df))
    with col2:
        st.metric("üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", len(filtered_df))
    with col3:
        if len(filtered_df) > 0:
            avg_days = filtered_df['–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ'].mean()
            st.metric("üìÖ –°—Ä–µ–¥–Ω–µ–µ –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ", f"{avg_days:.1f}")
        else:
            st.metric("üìÖ –°—Ä–µ–¥–Ω–µ–µ –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ", "0")
    with col4:
        if len(filtered_df) > 0:
            max_days_value = filtered_df['–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ'].max()
            st.metric("‚è∞ –ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π", max_days_value)
        else:
            st.metric("‚è∞ –ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π", "0")

    # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    st.dataframe(filtered_df, use_container_width=True)
    def to_excel(df):
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False)
        return output.getvalue()
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –≤ —Ñ–∞–π–ª",
        data=to_excel(filtered_df),
        file_name="result.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", layout="wide")
st.title("–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.success("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
        cal = Russia()
        today = pd.Timestamp(datetime.now().date())
        result_rows = []
        for business_id, group in df.groupby("business_id"):
            stage_21 = group[group["stage_to"] == "2.1 –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏"]
            if not stage_21.empty:
                idx_21 = stage_21["ts_from"].idxmax()
                row_21 = group.loc[idx_21]
                ts_from_21 = pd.to_datetime(row_21["ts_from"], errors="coerce")
                plan_pub_date = cal.add_working_days(ts_from_21, 21)
                plan_pub_date = pd.Timestamp(plan_pub_date)
            else:
                plan_pub_date = pd.NaT
            idx_last = group["ts_from"].idxmax()
            row_last = group.loc[idx_last]
            ts_from_last = pd.to_datetime(row_last["ts_from"], errors="coerce")
            if pd.notnull(ts_from_last):
                days_in_work = cal.get_working_days_delta(ts_from_last, today)
            else:
                days_in_work = None
            result_rows.append({
                "business_id": business_id,
                "created_at": pd.to_datetime(row_last.get("created_at", None), errors="coerce").strftime("%d.%m.%Y") if pd.notnull(row_last.get("created_at", None)) else "",
                "–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏": plan_pub_date.strftime("%d.%m.%Y") if pd.notnull(plan_pub_date) else "",
                "–¥–Ω–µ–π_–≤_—Ä–∞–±–æ—Ç–µ": days_in_work,
                "form_type_report": row_last.get("form_type_report", None),
                "report_code": row_last.get("report_code", None),
                "report_name": row_last.get("report_name", None),
                "current_stage": row_last.get("current_stage", None),
                "ts_from": pd.to_datetime(row_last.get("ts_from", None), errors="coerce").strftime("%d.%m.%Y") if pd.notnull(row_last.get("ts_from", None)) else "",
                "analyst": row_last.get("analyst", None),
                "request_owner": row_last.get("request_owner", None),
                "request_owner_ssp": row_last.get("request_owner_ssp", None)
            })
        df_result = pd.DataFrame(result_rows)
        df_result.insert(0, "‚Ññ", range(1, len(df_result) + 1))
        display_results(df_result)
        
