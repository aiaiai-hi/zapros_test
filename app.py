import streamlit as st
import pandas as pd
from io import BytesIO
from workalendar.europe import Russia
from datetime import datetime

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", layout="wide")

def display_results(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º"""
    # –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞
    st.subheader("üîé –ü–æ–∏—Å–∫")
    search_query = st.text_input(
        "–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –æ—Ç—á–µ—Ç–∞ (–ö–æ–¥ –æ—Ç—á–µ—Ç–∞) –∏–ª–∏ business_id:",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ business_id..."
    )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
    filtered_df = df.copy()
    if search_query:
        search_mask = (
            filtered_df['–ö–æ–¥ –æ—Ç—á–µ—Ç–∞'].astype(str).str.contains(search_query, case=False, na=False) |
            filtered_df['business_id'].astype(str).str.contains(search_query, case=False, na=False)
        )
        filtered_df = filtered_df[search_mask]

    # –§–∏–ª—å—Ç—Ä—ã
    st.subheader("üîß –§–∏–ª—å—Ç—Ä—ã")
    col1, col2, col3, col4 = st.columns(4)
    # –î–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ df!
    with col1:
        form_types = ['–í—Å–µ'] + sorted(df['–¢–∏–ø –æ—Ç—á–µ—Ç–∞'].dropna().unique().tolist())
        selected_form_type = st.selectbox("–¢–∏–ø —Ñ–æ—Ä–º—ã –æ—Ç—á–µ—Ç–∞:", form_types)
        analysts = ['–í—Å–µ'] + sorted(df['–ê–Ω–∞–ª–∏—Ç–∏–∫'].dropna().unique().tolist())
        selected_analyst = st.selectbox("–ê–Ω–∞–ª–∏—Ç–∏–∫:", analysts)
    with col2:
        stages = ['–í—Å–µ'] + sorted(df['–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø'].dropna().unique().tolist())
        selected_stage = st.selectbox("–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø:", stages)
        owners = ['–í—Å–µ'] + sorted(df['–í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–æ—Å–∞'].dropna().unique().tolist())
        selected_owner = st.selectbox("–í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–æ—Å–∞:", owners)
    with col3:
        owner_ssps = ['–í—Å–µ'] + sorted(df['–°–°–ü –í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–æ—Å–∞'].dropna().unique().tolist())
        selected_owner_ssp = st.selectbox("–°–°–ü –í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–æ—Å–∞:", owner_ssps)
        min_days = st.number_input("–ú–∏–Ω. –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ:", min_value=0, value=0)
    with col4:
        max_days = st.number_input("–ú–∞–∫—Å. –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ:", min_value=0, value=1000)
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"):
            st.rerun()
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if selected_form_type != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['–¢–∏–ø –æ—Ç—á–µ—Ç–∞'] == selected_form_type]
    if selected_stage != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø'] == selected_stage]
    if selected_analyst != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['–ê–Ω–∞–ª–∏—Ç–∏–∫'] == selected_analyst]
    if selected_owner != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['–í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–æ—Å–∞'] == selected_owner]
    if selected_owner_ssp != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['–°–°–ü –í–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø—Ä–æ—Å–∞'] == selected_owner_ssp]
    filtered_df = filtered_df[
        (filtered_df['–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ'] >= min_days) & 
        (filtered_df['–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ'] <= max_days)
    ]
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(df))
    with col2:
        st.metric("üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", len(filtered_df))
    with col3:
        if len(filtered_df) > 0:
            avg_days = filtered_df['–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ'].mean()
            st.metric("üìÖ –°—Ä–µ–¥–Ω–µ–µ –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ", f"{avg_days:.1f}")
        else:
            st.metric("üìÖ –°—Ä–µ–¥–Ω–µ–µ –¥–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ", "0")
    with col4:
        if len(filtered_df) > 0:
            max_days_value = filtered_df['–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ'].max()
            st.metric("‚è∞ –ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π", max_days_value)
        else:
            st.metric("‚è∞ –ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π", "0")
    # --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π ---
    st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É ‚Ññ –µ—Å–ª–∏ –µ—Å—Ç—å
    table_df = filtered_df.copy()
    if "‚Ññ" in table_df.columns:
        table_df = table_df.drop(columns=["‚Ññ"])
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º business_id
    st.dataframe(
        table_df.style.set_properties(subset=["business_id"], **{'text-align': 'center'}),
        use_container_width=True
    )
    def to_excel(df):
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False)
        return output.getvalue()
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –≤ —Ñ–∞–π–ª",
        data=to_excel(table_df),
        file_name="result.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
